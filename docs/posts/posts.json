[
  {
    "path": "posts/2023-12-20-dsaa-wrapped-2023/",
    "title": "DSAA Wrapped 2023",
    "description": "Reflecting on 2023. [6 min read]",
    "author": [
      {
        "name": "Meggie Debnath, Phyllis Tian, Rida Malik, and Michaelia Banning, on behalf of DSAA",
        "url": {}
      }
    ],
    "date": "2023-12-20",
    "categories": [
      "post-miscellaneous"
    ],
    "contents": "\r\nIt‚Äôs the end of the year, and that means it‚Äôs time for another DSAA\r\nWrapped!\r\nOur DSAA Wrapped is based on Spotify Wrapped, an annual data-driven\r\nsummary of each user‚Äôs listening habits and trends over the past year.\r\nThese recaps are showcased in engaging visual summary cards, which are\r\nshared widely with friends and across social media platforms.\r\nHere‚Äôs our version, showcasing some of our project deployments and\r\ntop team moments. This year, we focused heavily on evaluating some of\r\nour existing tools that have been deployed, and on projects that aim to\r\nimprove patient flow!\r\n\r\n\r\n\r\nProjects\r\nThis year, we deployed a whopping 14 projects across\r\nall of our product families! That‚Äôs more projects than the number of\r\npizzas we‚Äôve consumed this year (okay, maybe not that many, but\r\nclose).\r\nOur product and data wizards worked their magic, and the project that\r\nstole the show in terms of views was once again none other than‚Ä¶ the\r\nOperations Centre! The Ops Centre project offers an\r\noverview of patient movement within the hospital. It comprises various\r\npages that display real-time information related to planned admissions,\r\noccupancy, upcoming discharges, bed cleaning, portering, and other\r\ncritical elements necessary for a holistic understanding of patient\r\nflow.\r\nThe Avengers of data science\r\nWhen it comes to assembling a team, our project with the most team\r\nmembers, Predicting Clinical Readiness with 14\r\nmembers, resembled an Avengers movie‚Äîfull of diverse talents,\r\noccasional challenges, and ultimately, a blockbuster success. The aim of\r\nthis project is to identify General Internal Medicine patients at\r\nSt.¬†Michael‚Äôs Hospital who are likely to become medically stable so that\r\ndischarge related activities can start earlier in the patient‚Äôs hospital\r\nstay, ultimately achieving better patient flow and minimizing\r\ndelays.\r\nProduct family royalty üëë\r\nIn a year that saw projects popping up like mushrooms after rain, the\r\nPatient Flow family stood tall, boasting the crown for\r\nthe most projects.\r\nSpeaking of product families, we had a new product family join us\r\nthis year‚Ä¶ the Signal1 family, a collaboration between\r\nDSAA and Signal1, bringing our total\r\nnumber of product families to 6! They are also the\r\nfamily with the most team members at 11 members.\r\nSprint improvement weeks üõ†Ô∏è\r\nIn 2023, we had 2 sprint ‚Äúimprovement‚Äù weeks which\r\nwere as fun and productive as ever, as we reached a milestone of\r\n10 sprint weeks completed till date! From cross-team\r\nbrainstorming sessions to infrastructure improvements, we emerged\r\nstronger, wiser, and with a new found appreciation for the power of\r\nespresso breaks. In our 10th sprint week, we had 32\r\ntasks in the backlog, 20 accomplishments\r\ndemoed, and 4 pizzas eaten.\r\nThe learning never stops\r\nAt DSAA, the learning never stops!\r\nIn our team-wide journal clubs, we learned about:\r\nThe Five\r\nIdeals\r\nLawsuits\r\nin the domain of generative AI\r\nProblems\r\nin the deployment of ML models in healthcare\r\nClean code in\r\nPython\r\nand more!\r\nThis year, our Advanced Analytics (AA) sub-team had more than\r\n10 journal club sessions that dived into the worlds of Natural\r\nLanguage Processing (NLP), performance optimization, and project\r\nevaluation. The AA team also had the chance to take their learning\r\noutside of the office, by going on a field trip to the Thomas Fisher\r\nRare Book Library at U of T, which had an exhibit of Data\r\nVisualization Throughout History.\r\nWe were also fortunate to have Posit host a number of workshops for\r\nus, covering the topics of pointblank and MLOps\r\nwith vetiver.\r\nSharing ideas\r\nThis year, we didn‚Äôt just learn new things, our team members also had\r\nopportunities to exchange ideas, and share insights and experiences\r\nthrough talks and conferences. Our team presented about the Hemodialysis\r\nproject at the Renal\r\nInsight User Group Meeting, shared lessons from implementing AI in\r\nhealthcare from the CHARTwatch project and beyond, and discussed estimating\r\nROI for analytics and data projects.\r\nWe also hope to continue to raise our count of published blog posts!\r\nThis past year, we‚Äôve had team members share 3 blog\r\nposts about developing\r\nand deploying AI solutions in the hospital, creating\r\nreproducible environments for building medical imaging machine learning\r\nmodels with Nix, and discrete\r\nevent simulation in healthcare.\r\nThe Party Planning Pandas\r\nand beyond! üéâ\r\nLet‚Äôs recount some of our memorable team moments from this past year,\r\norganized by our social committee: The Party Planning Pandas üêº.\r\nNerf Gun Challenge: With our in-office stash of nerf guns, during\r\nthis challenge, our team learned that precision and luck go hand in\r\nhand.\r\nValentine‚Äôs Day & Zoom trivia: This year, our data science team\r\nembraced AI art generators to craft charming (and maybe a little scary)\r\nValentine‚Äôs Day cards as well as adorable baby animal versions of our\r\nteam.\r\n\r\n\r\n\r\nSummer Picnic: Sun, fun, and ICE CREAM ‚Äî our summer picnic at\r\nRiverdale Park in Toronto included some painting with marshmallows, an\r\nice cream truck, and a scavenger hunt that turned into an extended visit\r\nto Riverdale Farm!\r\nHalloween at DSAA: Our team members transformed into a raccoon, Snow\r\nWhite, Wednesday Addams, and everything in between.\r\nAxe Throwing: We traded our laptops for axes and unleashed our inner\r\nwarriors. Let‚Äôs just say, our aim in data science translated\r\nsurprisingly well to hitting bullseyes.\r\nAs we wrap up this year‚Äôs Wrapped, let‚Äôs share a round of applause\r\nfor our incredible team at DSAA and all of our collaborators. Here‚Äôs to\r\na year of innovation, collaboration, pizza, and data-driven\r\nsuccesses!\r\nWe‚Äôll leave you with some of our AI-generated holiday cards, happy\r\nholidays!\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2023-12-20-dsaa-wrapped-2023/dsaa_wrapped_preview.PNG",
    "last_modified": "2023-12-22T13:02:35-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-03-17-introduction-to-discrete-event-simulations-in-healthcare/",
    "title": "Introduction to Discrete Event Simulations in Healthcare",
    "description": "An introduction to Discrete Events Simulations (DES) in healthcare with an overview of the use of DES for modelling outpatient services appointments at Providence Healthcare.",
    "author": [
      {
        "name": "Kevin Wang, Neil Mistry",
        "url": "https://www.linkedin.com/in/mingkun-wang/, https://www.linkedin.com/in/neilmistry/"
      }
    ],
    "date": "2023-04-18",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nDiscrete Events Simulation at Providence Outpatient Care & Services Covid-19 Recovery scheduling\r\nBackground\r\nAn Example of DES in the Real World: Providence Outpatient DES Project\r\nHow we approached a DES solution\r\nConclusions\r\nLimitation\r\nDES software\r\n\r\n\r\nDiscrete Events Simulation at Providence Outpatient Care & Services Covid-19 Recovery scheduling\r\nDiscrete Events Simulations (DES) are a method of modeling the operation of real world systems. DES does this by modeling a series of events in time. Events are ordered by time of occurrence, and the DES system updates its state as it traverses through each event.\r\nThis type of simulation is useful at modeling a system with many uncertain (or probabalistic) steps. For example, in the Emergency Department, you won‚Äôt know when your next patient will arrive and you won‚Äôt know the condition this patient will arrive in. In systems where there are a complex number of steps, many different resources, inputs and outputs, DES may be one of the better ways to approach modelling.\r\nDES are built primarily for two purposes, to assess: (1) the current system and uncover bottlenecks, and (2) how changes to our system will impact its performance. We typically do this to test potential improvements to our system. This could be a change in our process, additional resources, changes to inputs or outputs and changes in our schedules. DES will allow us to measure things that are important to us in the current state and with changes to our system.\r\nThe underlying statistical theorems that support DES come from Queueing theory. A classic example of queueing theory is the Call Center. In a Call Center you have incoming calls, and you know roughly how many calls you can expect in any given time period, such as a Monday, or between 5-8pm on a Friday. Therefore you know the frequency of calls and have some expectation on the variation of calls throughout the week.\r\nPoisson Call Center QueueHowever you do not know exactly when your next call will arrive (remember this is probabilistic or uncertain). This is known as a Poisson arrival process, and is modeled as:\r\nPoisson Call Center QueueLambda \\(\\Lambda\\) is the only parameter that Poisson depends on. This is your arrival rate (on average). Queueing theory works well for a simple queue like this, where you have a single entry point for your customers, a single type of service (answering the call) with some probabalistic length of time and one exit for your customer (end of call).\r\nHowever with more complex system, like those in hospitals and other healthcare settings, we may have patients who arrive in multiple ways, have multiple possible treatments or interventions, and could have multiple exits (admission, discharge), the formulas for Queueing theory become impractical to model these systems. That is when we need DES!\r\nBackground\r\nSimulation had long been used in manufacturing as there can be considerable variability in process outputs in a manufacturing line. In addition to variability, having a bird‚Äôs eye view of the entire process can allow us to easily assess bottlenecks in our system. Bottlenecks could be caused by variability in our process outputs, overproduction, excess inventory, high down time or failures in machines, or a lack of staff or resources.\r\nWe can then make assessments to changes in our system. Let‚Äôs say for example we add an additional staff member at a point in our process. Does this improve our bottleneck? What if we replicate a few steps in our process and run parallel production? Will the cost to implement this strategy be outweighed by the benefits gained by a reduced bottleneck in this area? We can assess this in our simulation before trying it in our real world system.\r\nIn healthcare we see DES used, for examples, to evaluate and assess operational changes Emergency Departments, Operating Room Suites, Intensive Care Units, and Inpatient and Outpatient units. At Unity Health Toronto we used DES in the past to help us evaluate changes to the physical layout in the Emergency Department (ED), assess changes to physician scheduling in the ED and most recently, assess patient appointment scheduling for outpatient services.\r\nAn Example of DES in the Real World: Providence Outpatient DES Project\r\nProvidence Healthcare (one of the three hospitals in the Unity Health Toronto network) had challenges scheduling outpatient appointments with the onset of the second wave of the Covid-19 in 2021.\r\nOutpatient Services consists of multiple clinics providing medical appointments. Each patient arrives, registers, and wait for the appointment in the waiting areas or vehicle. They will then be escorted to clinical waiting areas or directed into a room. After the appointment, they may continue to wait in the clinical waiting areas for follow-ups or leave the hospital. During this process, there may be congestion resulting from a combination of patient behaviors, system resource and capacity (early-arrival of wheel-trans patients, max room capacity, lack of therapists); A smooth outpatient process is important for the hospital system to run efficiently for optimal patient care and quality of service.\r\nWe modeled the clinic in its current state and explored alternative appointment schedules to increase the number of patients flowing through outpatient services while maintaining social distancing practices.\r\nOutpatient clinic appointment process at Providence Healthcare in August 2020Under certain pandemic-based restrictions, all individuals were required to maintain social distancing between each other. To minimize unnecessary contact, the Outpatient Service Department wanted to control the maximum number of patients in each area of the department. Planning to re-open more outpatient services (and to reduce the backlog created by shutdowns during the first two waves of the pandemic), the Outpatient Service Department modeled new schedules by adding additional appointments with a combination of more staffing, longer hours, more patients and additional working days.\r\nHow we approached a DES solution\r\nThe solution that was developed for the Providence Healthcare Outpatient Service Department consists of two parts:\r\nA simulation model that recreates the physical space capacity and analyzes the system & process performance\r\nDesigning a web user interface that requires users to input key features of the simulation for testing different scenarios. In addition, the model would output key performance indicators to help access the performance of the proposed plans/system.\r\nThe primary input that our user can manipulate to test out scenarios is the appointment schedule. This appointment schedule includes a breakdown of the types and quantities of appointments that would be seen in Outpatient Services by the day of the week (Mon, Tue, Wed, and so on).\r\nThe simulation model consists of three main parts:\r\nA defined object class called ‚ÄúPatient‚Äù with all necessary attributes and pre-defined calculation functions for results and outputs. Attributes include but not limit to: appointment type, appointment clinic, and probability of the patient needing wheel chair transportation from their home.\r\nThe second part consists of logging, status update, capacity checking and calculation functions for the simulation process. Detailed information of patient arrivals are calculated and recorded through these supporting functions.\r\nThe last part is the simulation model function, where it reads in user defined clinics‚Äô capacity, registration time, and an appointment schedule from an inputted excel file. The model then reads the patient schedules and generates patients based on their scheduled appointment time.\r\nAll of our performance metrics (wait time, current number in system) are recorded through a trial of runs and outputted to the user. Utilization plots for clinics and service providers are also plotted.\r\nConclusions\r\nWe can use DES to test how changes to our system can affect the outcomes we are interested in improving.\r\nAt Providence health, we were able to test alternative patient schedules to measure their impact on throughput on our outpatient clinics. We tested several schedules that would increase the number of patients we would see, and our DES could tell us if we would maintain our social distancing requirements. Ultimately we were able to create schedules that could increase the number of patients we could see, even with our current staffing schedules.\r\nLimitation\r\nOne limitation in our DES is the service time for each appointment. We simplified the length of time a patient may spend at an appointment by ignoring some of the variabilities in process times due to the lack of data. Instead of fitting a time distribution, we had to use a more deterministic approach by assuming a static service time for all the servicing times involved in the model.\r\nDES software\r\nThere are many available software applications that can build DES models. Some provide an installer and can be used on a windows PC (ARENA, Anylogic, FlexSim, Simul8, etc). This is great for use in 1 time simulations when you will infrequently reassess your system.\r\nWe also have DES software that can be hosted remotely and can accept simulations as jobs (Simul8 has this feature). This type of software can be useful when you want to run a simulation more frequently, perhaps even live to predict possible incoming bottlenecks.\r\nThere are also many open source DES packages now available. Examples include DESMO-J, which is available in Java, Facsimile, in Scala, and SimPy, available in Python.\r\nData Science and Advanced Analytics wanted to host an application for users to enter patient schedules and run the simulation remotely and on-demand. We chose SimPy to accomplish this.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-02-28-medical-imaging-with-nix/",
    "title": "Reproducible medical imaging software environments in Nix, or, Living in the future is hard.",
    "description": "My journey creating a reproducible environment for building medical imaging machine learning models with Nix.",
    "author": [
      {
        "name": "Chris Hammill",
        "url": {}
      }
    ],
    "date": "2023-02-28",
    "categories": [
      "infrastructure",
      "deployment-environments",
      "nix"
    ],
    "contents": "\r\nI‚Äôve been thinking for a long time about how to build software environments that are resilient to the ravages of time and that others can pick up and use effectively at their leisure. So when in the course of my work at DSAA I needed to develop an effective environment for doing machine learning on medical imaging data, I jumped at the chance. The fruit of that labour is:\r\nhttps://github.com/LKS-CHART/medical-imaging-nix\r\na working environment of software, defined in software. It allows me or anyone else to reproduce my work or use the exact software computing environment I use. What do I mean by environment? In this case I mean isolated collections of programs, packages, and libraries that can be used together, but don‚Äôt interact with the rest of your software. The concept might be familiar if you‚Äôve worked with renv, conda, or lmod.\r\nThe project is powered by nix, a futuristic technology gaining a foothold among certain groups of software developers devops people, and programming language researchers1. Renowned for its ability to almost fully deterministically and reproducibly build software, it enables strongly isolated environments.\r\nWhat is medical-imaging-nix?\r\nThe repo above is a nix project2 that generates a software environment that can be used as a starting point for future projects.\r\nThe environment contains R, python, jupyter, a suite of tools for working with medical imaging files, pytorch and tensorflow with GPU support enabled. All3 the things a medical imaging data scientist needs to hit the ground running on a new project. It can be forked and expanded to include other kinds of dependencies, you could add julia4, rust, fortran, and many others with just a few lines of code.\r\nThe environment can be compiled into a apptainer container5 for portability to places that don‚Äôt have nix. To get started with the environment you need nix installed with flakes enabled but a new project can be initialized as simply as:\r\nmkdir my-awesome-project\r\ncd my-awesome-project\r\nnix flake init -t github:LKS-CHART/medical-imaging-nix\r\nnix develop\r\nthe first time you run this it will take a very long time, because it will build most of the software universe from scratch for you6. But after that all subsequent calls to nix develop will quickly drop you into your shiny new environment. If you‚Äôre ready to package up your environment into a container you can run:\r\nnix build\r\nthis also takes a while, so start it before a meeting. But once that‚Äôs done you can send your environment image to anywhere it might be needed.\r\nHow does it work\r\nI decided to build the environment using nix7, it is a package manager, a build system, and a programming language. The programming language allows you to write code that builds software, the build system builds the software and caches it in a content addressable store, and the package manager-like features give you access to those packages. This allows you to generate supercharged versions of conda environments, renvs, and can even obviate the need to use docker. I‚Äôll explain the advantages in a moment.\r\n\r\nyou, a savvy expert: but Chris, what about conda, renv, groundhog, pacman, rstudio package manager, and docker?\r\n\r\n\r\nme, an esoteric technology astronaut: what about ‚Äôem?\r\n\r\nThe nix ecosystem also provides a curated set of a packages referred to as nixpkgs, akin to conda, or debian packages available from apt. Nixpkgs is the largest set of packages provided by any package manager, so on paper this should mean that building environments with nix should be easier than any of the alternatives, you can just grab your packages from the massive set of packages in nixpkgs.\r\nBut what‚Äôs different?\r\nIf you talk to users of nix and ask them why nix, the argument is rarely centered on the size of nixpkgs although that is certainly a plus. You‚Äôre more likely to hear about how the builds are isolated, they don‚Äôt interact with the rest of your software, that the builds are specified in a single programming language, and that versioning of the entire repository can be done through git. These are no mean feats.\r\nBuilding software is really hard. If you‚Äôve ever wanted to build someone‚Äôs project from source, especially complicated modern projects, it can be a trying ordeal. Software can be built with make, cmake, ymake, autotools, setuptools, R CMD INSTALL, ninja, bazel, shake, and many many more build systems and tools. The extremely brilliant devs who designed the nix build system found ways to hook into most of the other common build systems, and then ecosystem contributors used those tools to create reproducible recipes to build each of the 81k+ packages in nixpkgs. Adding your own additional packages using the nix language and build system is relatively simple8, so as your project grows it can absorb new packages into your declaratively specified software environment9\r\nOnce you‚Äôve built the software, you then have to worry about dynamic dependencies. Dynamically linked C programs rely on dependencies that are hanging around on disk. A program called the linker says go find this particular feature you use when you run the program, if the dependencies providing those features have changed on disk your results could be different. Dynamically linking C programs/libraries relies on a byzantine collection of different types of mutable global state. There is your system default library locations (global state, disk-backed), LIBRARY_PATH/LD_LIBRARY_PATH (global state, shell environment local and disk-backed), pkg-config is sometimes used to configure linking (disk backed global-state pointing to disk-backed global state). Global state has the potential to do like state and change‚Ä¶ state. This means your results are balanced on a house of cards where shifting one part of the state could break your results.\r\nDon‚Äôt believe me that this is a real issue? What about silently getting the wrong results for your numerical code because you had LD_LIBRARY_PATH or update-alternatives set incorrectly, oof.\r\nOr not being able to build your software at all because one of your package managers got in the way. This may sound like puritanical nerd worries, but these are real issues I‚Äôve experienced in practice. I was soured on conda long ago when even having it on my executable path broke my ability to build the R package I was developing for work. What happened? Conda‚Äôs addition to my PATH overrode my system h5cc a compiler wrapper for building C libraries that depend on HDF5, this linked in the wrong version of HDF5 and prevented my R package from building. I had not asked conda for h5cc, it was pulled in as a dependency of some arbitrary conda package I was using. It‚Äôs wasn‚Äôt just conda‚Äôs fault, the R package itself was an eldritch horror of an autotools build, ditching conda was easier than fixing the R build to ignore conda‚Äôs h5cc.\r\nNix gets around these issues by not using the system default libraries wherever possible, avoiding LIBRARY_PATH/LD_LIBRARY_PATH wherever possible10, and making the places where state is unavoidable immutable (your nix store of built things is read-only). So builds are hermetic and isolated, you can happily have multiple versions of the same C library running around without paying any extra attention to where your C dependencies are coming from. This means you don‚Äôt need a separate docker container to have an alternate universe of C libraries to make sure your analysis works, you just have it beside all your normal stuff, and that‚Äôs relevatory when you‚Äôve been bitten by these problems enough times.\r\nThese builds, instead of being an imperative sequence of commands to run to build and install software to a specific place, are written in the nix programming language, a functional programming language designed to make it easy to modify and tweak the build and dependencies so that your software environment is fully specified in code.\r\nBy contrast conda has 8000 prebuilt packages, ubuntu offers an admirable 36k. These builds assume something about the directory layout of your system, and they can be broken by updating system packages using other package manager.\r\nNix also empowers you to be your own package repository, significant effort has gone into making builds fully deterministic where possible. This means once I‚Äôve built ‚ÄúpySweetDataToolR.jl‚Äù I can give it to you, if we‚Äôre on the same architecture you can just slot the relevant parts of my nix store into yours, so for a medium or larger organization you can set up a global cache of nix builds on a server that can be downloaded by each user. For smaller orgs you might be able to get away with a single nix-store that everyone can share. No more N numpys per employee.\r\nWhere‚Äôs the rub?\r\nSo far I might have sounded effusive, if not fanboyish about the space alien wizard technology that can replace apt, conda, renv, etc. but there are real and significant sharp corners to nix and nixpkgs especially for data science. First off while nixpkgs includes every single package available on CRAN at the time of last snapshot, its coverage of pypi is piddly. Nixpkgs includes ~5200 python3.10 packages, whereas pypi has ~432k packages11. In order to put together the data science environment I built, I needed to package or modify 33 python packages. Some medical imaging related, some for working with jupyter notebooks, some machine learning related. And while generally not very challenging once I got the hang of it, some are quite thorny to package. Most are properly built from source, but some are just a thin wrapper around the wheels available on pypi, which defeats the purpose of nix12. Nix also encourages you to run the full test suite for the packages, but often test code is scrubbed from packages on pypi, so unless you get the code from github you may not have the tests. And you might need to disable some tests because nix‚Äôs test environment is immutable, and builds are disallowed from downloading supplemental data by default, which sometimes breaks test code, so either you have to patch the tests yourself or you turn them off (so guess which you choose if you‚Äôre pushing for a deadline).\r\nSo life in the future is tough, because you become part of the team building it. The future I mean. Since starting my nix journey several years ago I‚Äôve contributed code to nixpkgs more than a few times, but when you are under pressure to achieve actual business goals it can be very frustrating to have to solve these problems yourself. What‚Äôs worse is I still feel like a beginner with nix despite having years of experience. Others I‚Äôve encountered like the documentation, participate in the discourse or IRC channels and feel comfortable using nix, my experience hasn‚Äôt been so pleasant, with most issues I‚Äôve encountered feeling almost ungoogleable, different learning styles I guess?\r\nThe other place I‚Äôve found nixpkgs to be frustrating to use for python, is upgrading. Unless you‚Äôre maintaining your own branch of nixpkgs you are somewhat at the whims of other nixpkg contributors as to what gets upgraded when. And due to a potentially poor choice on strategies the most up-to-date version of nixpkgs may contain a large set of temporarily broken python packages. Often upgrading one package will break many packages that depend on it, not only because the code becomes incompatible, but because it is fashionable in python packaging to set strict version upper bounds, so the package won‚Äôt even build (so we can‚Äôt check if all the tests still pass with the new version). So I find myself in the position of checking out old versions of files from nixpkgs to build my package overlays when I need to downdate a certain dependency. This is tedious and I should probably switch to maintaining my own version of nixpkgs with my downdates and modifications, but this makes it harder to share with others.\r\nSo this points to the biggest advantage of conda over nix, when conda does not have a package it gets it from pypi, nixpkgs cannot fail over to grabbing from pypi and installing with pip, it also can‚Äôt do dependency solving, if the nixpkgs version of a python lib isn‚Äôt compatible with another, you have to go find a satisfactory version yourself (or cheat and lie about the version requirements^ [I was reminded after the first draft of this post about the existence of pythonRelaxDeps, a way to automatically soften version requirements, I may switch to use this in the future.]). This is painful. There are two nix projects that have aimed to address this problem, mach-nix which has been abandoned13, and poetry2nix which may solve some of my woes but I haven‚Äôt tried it yet.\r\nAnother advantage alluded to already is speed. Compiling things takes time, so unless you‚Äôre always getting prebuilt binaries from the nix servers you can be in for long build times. Nix is good at not duplicating build work, but sometimes rebuilding is unavoidable. Say you want to use a newer version of cuda, or gcc, most of your environment will need to be rebuilt14\r\nFinally, the last difficulty is with irreducible system dependencies. Nixpkgs, when you‚Äôre not using the nix operating system, does not interact well with graphics drivers, there is a wrapper project I use called NixGL which gives you access to graphics drivers and allows you to run programs that use CUDA15. However this has meant I needed to hardcode my graphics driver into the nix flake, severely hindering portability16.\r\nIs this worth it?\r\nI don‚Äôt know. I‚Äôve sunk considerable cost into building this environment so one might reasonably expect me to be quite biased.\r\nWould cutting down my effort by 75% at the risk of some amount of computational irreproducibility and unportability be worth it?\r\nIs this a case of good enough practices trumping best practices?\r\nI‚Äôm not sure, but now that it‚Äôs built I know that I will be able to revisit this exact environment for many years to come. I‚Äôve acquired the skills to fix package sets as issues arise, so it‚Äôs not a large burden any longer to develop. If I can iron out a few more details about merging python package sets from multiple versions of nixpkgs I would think that this is substantively superior to managing my software with conda, apt, renv, and docker.\r\nWould I encourage others to adopt the strategy of creating a nix environment from scratch for each new project? Probably not, at least don‚Äôt go it alone. Sharing working flakes and overlays for data scientists to springboard off of makes this type of reproducible, portable, futuristic software versioning possible17, but keep your novelty budget in mind, you might be wise to pick boring technology.\r\nFuture directions\r\nMy plans are to continue improving and refining this environment. Future directions I‚Äôd plan to investigate are:\r\nImproving the code quality of the overlay, for example converting from explicit find-replaces to pythonRelaxDeps in the code that generates python package builds.\r\nContributing upstream. I‚Äôve had a few PRs back to nixpkgs go through, and some stagnated from slow feedback cycles. I should commit to giving back to the community when capacity allows.\r\nFigure out how to interleave package version sets for python. In general if I want a version of software from nixpkgs commit A and some other software from commit B, I can just use two versions of nixpkgs in my flake. Unfortunately it is not so simple to do with python packages, instead of building the desired package against your versions of all other python packages it will try to bring in its own, which breaks python installs. I suspect I can ‚Äúborrow‚Äù ideas from mach-nix for this.\r\nGeneralize the graphics driver pinning, or at least provide a shell script to automatically patch the flake to the current system graphics driver.\r\nContinue adding/packaging useful software so that this environment stays productive and portable for years to come.\r\nConveniently for me, one of the very few other nix medical imaging machine learning people just joined our team, so I‚Äôm sure he‚Äôll have many useful suggestions to improve things.\r\nI like many others think that approaches like nix will become more prevalent in the future, and it‚Äôs nice to get a taste of it now even if there are pain points.\r\nAcknowledgements\r\nThanks to Ben Darwin, Chloe Pou-Prom, Meggie Debnath, Dimuth Kurukulaarachchi, and Derek Beaton for providing useful feedback on drafts of this post.\r\n\r\nComments\r\nYou can use your Mastodon account to reply to this post.\r\nReply\r\nReply to cfhammill's post\r\n   With an account on the Fediverse or Mastodon, you can respond to this post. Since Mastodon is decentralized, you can use your existing account hosted by another Mastodon server or compatible platform if you don't have an account on this one. \r\n  Copy and paste this URL into the search field of your favourite Fediverse app or the web interface of your Mastodon server.\r\n  \r\n    Copy\r\n    Close\r\n  \r\n\r\nLoad comments\r\nYou need JavaScript to view the comments.\r\n\r\n  .mastodon-comment {\r\n  background-color: #00000007\r\n  }\r\n\r\n    const dialog = document.querySelector('dialog');\r\n    document.getElementById('replyButton').addEventListener('click', () => {\r\n        dialog.showModal();\r\n    });\r\n    document.getElementById('copyButton').addEventListener('click', () => {\r\n        navigator.clipboard.writeText('https://mastodon.social/@cfhammill/109944483497018229');\r\n    });\r\n    document.getElementById('cancelButton').addEventListener('click', () => {\r\n        dialog.close();\r\n    });\r\n    dialog.addEventListener('keydown', e => {\r\n        if (e.key === 'Escape') dialog.close();\r\n    });\r\n    function escapeHtml(unsafe) {\r\n        return unsafe\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/<\/g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    }\r\n\r\n    function make_post_loader(){\r\n        let resp_json = null;\r\n        let to_load = 0;\r\n        const load_n = 10;\r\n\r\n        function loader(){\r\n            to_load = to_load + 1\r\n            if(!resp_json){\r\n                resp_json = fetch('https://mastodon.social/api/v1/statuses/109944483497018229/context').\r\n                            then(function(response){ return response.json() });\r\n            }\r\n\r\n            resp_json.then(function (data){\r\n                if(data['descendants'] &&\r\n                   Array.isArray(data['descendants']) && \r\n                   data['descendants'].length > 0) {\r\n                    document.getElementById('mastodon-comments-list').innerHTML = \"\";\r\n                    data['descendants'].slice(0, load_n * to_load).forEach(function(reply) {\r\n                        reply.account.display_name = escapeHtml(reply.account.display_name);\r\n                        reply.account.emojis.forEach(emoji => {\r\n                            reply.account.display_name = \r\n                                reply.account.display_name.replace( `:${emoji.shortcode}: `,\r\n                                                                    `<img src=\"${escapeHtml(emoji.static_url)}\" alt=\"Emoji ${emoji.shortcode}\" height=\"20\" width=\"20\" /> `);\r\n                        });\r\n                        mastodonComment =\r\n                            `<div class=\"mastodon-comment\">\r\n  <div class=\"avatar\">\r\n    <img src=\"${escapeHtml(reply.account.avatar_static)}\" height=60 width=60 alt=\"\">\r\n    <div>\r\n      <div class=\"content\">\r\n        <div class=\"author\">\r\n          <a href=\"${reply.account.url}\" rel=\"nofollow\">\r\n            <span>${reply.account.display_name}<\/span>\r\n            <span class=\"disabled\">${escapeHtml(reply.account.acct)}<\/span>\r\n          <\/a>\r\n          <a class=\"date\" href=\"${reply.uri}\" rel=\"nofollow\">\r\n            ${reply.created_at.substr(0, 10)}\r\n          <\/a>\r\n        <\/div>\r\n        <div class=\"mastodon-comment-content\">${reply.content}<\/div> \r\n      <\/div>\r\n    <\/div> `;\r\n                        document.getElementById('mastodon-comments-list').appendChild(DOMPurify.sanitize(mastodonComment, {'RETURN_DOM_FRAGMENT': true}));\r\n                        document.getElementById('load-comment').innerText = \"Load more\"\r\n                    });\r\n                } else {\r\n                    document.getElementById('mastodon-comments-list').innerHTML = \"<p>No comments found<\/p>\";\r\n                }\r\n            }); \r\n        }\r\n        return loader;\r\n    }\r\n\r\n    document.getElementById(\"load-comment\").addEventListener(\"click\", make_post_loader());\r\n\r\n\r\n  (function(){\r\n    document.getElementsByClassName(\"d-title\")[0].getElementsByTagName(\"h1\")[0].innerHTML = \"Reproducible medical imaging software environments in Nix.<\/br> or<\/br> Living in the future is hard.\"; \r\n  })();\r\n\r\na lot of ink has been spilled detailing how nix works and why you should use it. My treatment will be relatively superficial, instead focusing on my efforts and challenges using it in practice. If you are interested in the former I recommend:\r\n- https://serokell.io/blog/what-is-nix\r\n- https://revelry.co/insights/development/nix-time/ ‚Ü©Ô∏é\r\nspecifically a nix flake, something like a library or package, useful for combining different projects that use nix‚Ü©Ô∏é\r\nwell, most anyway‚Ü©Ô∏é\r\nalthough it is recommended you manage julia packages not using nix.‚Ü©Ô∏é\r\nI will probably switch to or add docker before long‚Ü©Ô∏é\r\nincluding pytorch and tensorflow, let it run overnight. This is mostly due to CUDA, I explain a bit later‚Ü©Ô∏é\r\nNix can mean a lot of things: https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html‚Ü©Ô∏é\r\nonce you‚Äôve conquered learning it.‚Ü©Ô∏é\r\nthis is also a pain point, which I‚Äôll talk about later. But it‚Äôs painful only because nix allows you to do something that essentially no one would even try to do with other package managers.‚Ü©Ô∏é\r\nit does this by patching the produced compiled artifacts to point to their ‚Äúdynamic‚Äù dependencies statically using @rpath‚Ü©Ô∏é\r\nto be fair, pypi doesn‚Äôt have package quality standards, many of these are abandoned or malware‚Ü©Ô∏é\r\nby introducing possible system dependencies and portability issues, although I would argue incrementally better is still better, a few risky packages is better than all risky packages.‚Ü©Ô∏é\r\nalthough hopefully returning as part of https://github.com/nix-community/dream2nix in the future‚Ü©Ô∏é\r\n a colleague suggests that we create a build farm where a background process builds new versions of things so that there are prebuilt versions always available, but that is an infrastructure investment that hasn‚Äôt felt worth it yet. Apparently the issue is that CUDA is technically not free software and by policy the nix build farms won‚Äôt build it for us. ‚Ü©Ô∏é\r\nyou need to start programs with nixGL<driver> <program> which is irritating, but I think can be fixed in my flake‚Ü©Ô∏é\r\nOk you‚Äôd need to edit one line in the flake but that‚Äôs enough of a barrier to discourage users. If anyone in the nix community can help me solve this problem I‚Äôd be extremely grateful‚Ü©Ô∏é\r\nand of course contributing back to nixpkgs where you can‚Ü©Ô∏é\r\n",
    "preview": "posts/2023-02-28-medical-imaging-with-nix/future-compute-v2.jpg",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-01-27-with-a-little-help-from-my-friends/",
    "title": "With A Little Help From My Friends",
    "description": "Accompanying blog post for the Posit Community talk: \"With A Little Help From My Friends: Tools and insights for developing and deploying in the hospital‚Äù.",
    "author": [
      {
        "name": "Chloe Pou-Prom",
        "url": {}
      }
    ],
    "date": "2023-01-27",
    "categories": [
      "post-miscellaneous",
      "post-talks"
    ],
    "contents": "\r\n\r\nThis is a summary of ‚ÄúWith A Little Help From My Friends: Tools and insights for developing and deploying in the hospital‚Äù, a talk given on November 15, 2022 as part of the Posit Enterprise Community Meetup series. A recording of the talk is available here and a PDF of the accompanying slides can be found here.\r\n\r\nA success story\r\nHere at DSAA, we developed CHARTwatch, an early warning system for detecting patient deterioration. The system runs every hour:\r\nFirst, CHARTwatch ingests laboratory values, vital measurements, and demographics.\r\nThen, CHARTwatch classifies each visit into the following group: High risk vs Medium risk vs Low risk.\r\nThe risk group predictions are then delivered through different methods:\r\nEmails\r\nUpdates to a front-end tool\r\nAlerts sent to phones\r\n\r\nFinally, on August 2020, CHARTwatch went live and we were able to deploy to the General Internal Medicine (GIM) ward!! Developing and deploying CHARTwatch was a difficult feat and wouldn‚Äôt have been possible without the help of a few friends‚Ä¶\r\nTools for development\r\nDatabase connections\r\nThere are various data systems in the hospital, all with their own quirks and intricacies. In order to make it easier for the Advanced Analytics team to work with the different hospital databases, we developed chartdb, an internal R package.\r\nThe connection functions follow the same pattern, making it easier for data scientists and data analysts to work with databases.\r\n\r\n\r\ncon_a <- chartdb::connect_databaseA(username = ..., password = ...)\r\ncon_b <- chartdb::connect_databaseB(username = ..., password = ...)\r\ncon_edw <- chartdb::connect_edw(username = ..., password = ...)\r\ncon_soarian <- chartdb::connect_soarian(username = ..., password = ...)\r\ncon_mak <- chartdb::connect_mak(username = ..., password = ...)\r\ncon_syngo <- chartdb::connect_syngo(username = ..., password = ...)\r\n\r\n\r\n\r\nA reproducible environment\r\n\r\nA one-sentence horror story: ‚ÄúIt works on my machine.‚Äù\r\n\r\n\r\nTo improve reproducibility, we use renv, an R package for R dependency management.\r\nWhen setting up your renv environment, the renv.lock will keep track of the different packages (and their versions!!). If a new person needs to work on the project, they can use the renv.lock file to download the same packages and the same package versions! Woohoo!\r\nPackage-based development\r\nWhy write a package?\r\nPlenty! Of! Reasons!\r\nIn particular, writing a package makes it easy to share code and knowledge with others.\r\nAnd, writing a package greatly reduces the amount of times you‚Äôre copy-pasting code. Really, it‚Äôs a win-win-win situation!\r\nEnvironment! Environment! Environments\r\nWe typically work with 3 different environment.\r\nThe development environment is the one on your local computer or your development server.\r\nThe staging environment is as close to the ‚Äúreal‚Äù deployment environment as possible.\r\nThe production environment is where things actually get deployed. Speaking of production environments, now‚Äôs a great time to talk about the tools we need for deployment. Before doing that though, time for‚Ä¶\r\nAn interlude\r\nA multi-sentence horror story:\r\n\r\nIn earlier attempts to deploy CHARTwatch, we were using multiple CRON jobs‚Ä¶ that called different bash scripts‚Ä¶ which then called different Python/R/Java scripts. Oh, and we had no separate environments. Or rather, we only had one environment, where test environment = staging environment = production environment\r\n\r\n\r\nTools for deployment\r\nInterlude over! Let‚Äôs looks the tools we need for deployment.\r\nAuthentication\r\n\r\nWe rely on Posit Connect for this. Posit Connect works with the hospital Active Directory, which enables administrators to manage permissions and access. What does this mean?\r\nDevelopers don‚Äôt need to keep track of an extra server username and password.\r\nEnd-users can log in with their hospital credentials!\r\nScheduling\r\nPosit Connect also gives us the ability to schedule scripts through their admin interface.\r\nDowntime\r\nKnowing when things don‚Äôt work is crucial for deployment.\r\nWe use jarvis, our own internally-developed R package, to email and Slack notifications alerting us of issues.\r\nEach project will also have downtime protocol which defines the steps that various team members must take when something isn‚Äôt working.\r\nFor example, when a CHARTwatch downtime affects end-users, an email alert is sent to the entire hospital. Not all projects will require something like this, but since CHARTwatch is embedded in clinical care, many need to be aware of the downtime.\r\n\r\nA secure way to download internally-developed packages\r\nWe need to limit who can access the hospital network. Posit Package Manager is a repository package management that lets us download packages while being disconnected from the Internet.\r\nAn implementation plan\r\nDeploying an early warning system in the hospital involves working with many different groups. All worked together to develop the implementation plan. Some takeaways from the implementation plan:\r\nConsider existing resources! There‚Äôs no point in re-implementing a workflow that already exists.\r\nFor example, notifications were designed so that they fit within existing processes. Emails to charge nurses were sent at times that made the most sense based on their shifts.\r\n\r\nHave a silent deployment period! This is useful for identifying unexpected bugs.\r\nOne bug we found in silent deployment was caused by a particular NAsty lab‚Ä¶\r\n\r\nFind out more\r\nThis is a very very very very brief overview of CHARTwatch and how we develop and deploy models in the hospital. Check out the reading list below for more details.\r\nTo learn more about CHARTwatch‚Äôs model development and validation, see: ‚ÄúPreparing a Clinical Support Model for Silent Mode in General Internal Medicine‚Äù by Nestor et al.¬†(2020).\r\nTo learn more about the process changes that were required for CHARTwatch‚Äôs implementation, see: ‚ÄúImplementing Machine Learning in Medicine‚Äù by Verma et al.¬†(2021)\r\nTo read all about the technical infrastructure that lead to CHARTwatch‚Äôs deployment, see: ‚ÄúFrom Compute to Care: Lessons Learned from Deploying an Early Warning System into Clinical Practice‚Äù by Pou-Prom et al.¬†(2022)\r\nTo find out all about the data that is used to train CHARTwatch, see: ‚ÄúGIM, a dataset for predicting patient deterioration in the General Internal Medicine ward (version 1.0.0)‚Äù by Kuzulugil et al.¬†(2022)\r\nThis white paper by Signal1: ‚ÄúThe Burden of Clinical Deterioration and How One Hospital is Tackling it with Machine Learning‚Äù\r\n\r\n\r\n\r\n",
    "preview": "posts/2023-01-27-with-a-little-help-from-my-friends/this_is_fine.png",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-12-16-dsaa-wrapped/",
    "title": "DSAA Wrapped",
    "description": "Reflecting on 2022. [5 min read]",
    "author": [
      {
        "name": "Chloe Pou-Prom, Meggie Debnath, Derek Beaton, and Cathy Zhu on behalf of DSAA",
        "url": {}
      }
    ],
    "date": "2022-12-13",
    "categories": [
      "post-miscellaneous"
    ],
    "contents": "\r\nThe end of the year is a time for reflection, reminiscing, and sharing screenshots of our Spotify Wrapped. For those who are unfamiliar, Spotify Wrapped is a yearly marketing campaign by Spotify, where they compile streaming data and create a personalized graphic for each user. 1\r\nIn the spirit of data, end-of-year reflections, and colorful infographics, we thought it would be fun to create our very own DSAA wrapped!\r\nEnjoy some stats!!\r\n\r\n\r\n\r\nProjects\r\n2022 was a busy year with lots of projects!!\r\nTotal # of projects deployed: 9\r\nMost viewed project: Ops Centre\r\nThe Ops Centre project provides a clear picture of patient flow within the hospital. It consists of multiple data tiles that reflect real-time data in the areas of occupancy, upcoming discharges, planned admissions, bed cleaning, portering, and other elements essential to providing a full-picture of patient flow.\r\n\r\nProject with the most team members whose names start with M: Hemodialysis\r\nThe Hemodialysis project is a weekly digest tool for clinicians at the St.¬†Michael‚Äôs Hospital hemodialysis clinics. The tool provides patients‚Äô risks of a unplanned hospital visits.\r\n\r\nProduct families\r\n2022 was the year of product families.2\r\n\r\nWhoa, wait. What exactly is a product family?\r\nProduct at DSAA is a platform, application, system, or report that is created to meet patient, clinician, or hospital operational needs.\r\nProduct family (roughly comparable to a product line) is a group of related products that are developed and maintained by a single cross-functional team at DSAA.\r\nWe adopted this custom framework in order to allow staff to work effectively within persistent teams and to leverage resources across products the best we can. The products under each product family are related by common product value and/or shared domain expertise requirement.\r\nSome product family stats!\r\nNumber of product families: 6\r\nProduct family with the most projects: The Patient Flow product family 3\r\nThe Patient Flow product family aims to make the patients journey though the hospital as safe and comfortable as possible without compromising care. The Ops Centre is an example of a project that is part of this family.\r\n\r\nDSAA and improvement\r\n2022 was a year where we focused on improving existing operations.\r\n# of sprint improvement weeks: 3\r\nThe sprint improvement week is a full week dedicated to DSAA process improvement work in the areas of data infrastructure, source system optimization, DevOps, data governance, databases, analytics and project management processes, and more! The DSAA team works together to clear a backlog of tasks, and then we share our accomplishments through demos at the end of the week.\r\nSome notable achievements from past sprint improvement weeks are: our very own DSAA handbook, maintenance and update of internally-developed packages, and experimenting with containers!\r\n\r\n# of blog posts: 5\r\n2022 is when we re-launched this blog!\r\n\r\n# of journal club sessions lead by the Advanced Analytics team: at least 16\r\nWe covered the following topics: AI ethics, equity, & inclusion, anomaly detection4, survival analysis, Canadian healthcare.\r\n\r\n# of ‚Äúsheets‚Äù created: 35\r\nTemplates! Templates! Templates! We worked on templates for: Datasheet, Factsheet, and Models card sheet.\r\n\r\n# of Advanced Analytics mini-demos: 8\r\nMini-demos are lead by a different Advanced Analytics team member and include (you guessed it) a mini-demo!! Usually, one of the team members will try out a cool new package or talk about a fun/interesting/challenging problem they ran into. For example, we had a mini-demo on the funneljoin package.\r\n\r\nDSAA‚Äôs social committee\r\nOur team‚Äôs social committee (a.k.a. the Party Planning Committee) (a.k.a. the Party Planning Pandas) have organized some GREAT events this year.\r\n# of steps completed during the Step Challenge: 1,983,000\r\nThe Step Challenge was 1-week challenge in May where team members were encouraged to get as many steps in as possible! The max # of daily steps was 32,998 and the min # of daily steps was 246.\r\n\r\n# of ‚Äúwizard‚Äù classes: 3\r\nWizard classes are DSAA-lead classes to learn something fun. This year we learned how to bake puff pastries, how to play euchre and how to make pizza.\r\nSpeaking of pizza‚Ä¶.\r\n\r\n# of pizzas made by DSAA team members: \\(\\infty\\)\r\nPizza lesson night was very popular!!! Check out some of delicious pizzas that team members made:\r\n\r\n\r\n\r\nMost requested album: The Charlie Brown Christmas soundtrack\r\nDuring the year, many of our team members would hop on a Zoom call, play some music, and work together. The most played album was the Charlie Brown Christmas soundtrack, very closely followed by lo-fi chill hip hop.\r\n\r\n‚Ä¶ and that‚Äôs a wrap!\r\n2022 was a great year and we‚Äôre looking forward to 2023.\r\nSome things you can expect in the new year:\r\nMore blog posts!!!!!!!!6\r\nMore pizza!\r\nMore journal club sessions. We‚Äôre looking forward to reading up on NLP and timeseries!\r\nMore steps!\r\n\r\nWe surveyed the members on DSAA and found that the most listened music genre is Pop, followed by various interesting variations of Indie (indie pop, indie soul, indie Qu√©b√©cois).‚Ü©Ô∏é\r\nBlog post coming soon!! ü§û‚Ü©Ô∏é\r\nFun fact: The Patient Flow product family is also the product family with the most Fast & Furious memes.‚Ü©Ô∏é\r\nblog post coming soon! :-)‚Ü©Ô∏é\r\nBlog post coming soon!!! üôè‚Ü©Ô∏é\r\nWe promised a few in this blog post, so now we‚Äôre on the hook!‚Ü©Ô∏é\r\n",
    "preview": "posts/2022-12-16-dsaa-wrapped/dsaa_wrapped_preview.PNG",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-08-12-putting-the-fun-in-funneljoin/",
    "title": "Putting the fun in `funneljoin`",
    "description": "An introduction to, an example of, and my (lazy) journey to discovering the `funneljoin` package. [10 min read]",
    "author": [
      {
        "name": "Derek Beaton",
        "url": "https://twitter.com/derek__beaton"
      }
    ],
    "date": "2022-08-12",
    "categories": [
      "language-R",
      "project-chartwatch",
      "post-miscellaneous",
      "funneljoin"
    ],
    "contents": "\r\n\r\nContents\r\nMy lazy journey to discovery\r\nA quick view of the data\r\nA look at the data\r\nWhat we want and the behavior we‚Äôd expect\r\n\r\nA journey to find and a journey through funneljoin\r\nMy first failure\r\nMy second failure\r\nA third successful attempt\r\n\r\nConclusions\r\n\r\nMy lazy journey to discovery\r\nA while back, I was helping1 out on one of our new projects: an expansion of CHARTWatch to new units. To learn a bit more about CHARTWatch you should read (Verma et al. 2021) that explains how to get models in the clinical environment and (Pou-Prom et al., n.d.) on all the technical parts required.\r\nWe were doing some data exploration for the project and we had a fairly straight forward question to answer: What is the first event after a procedure for a patient?\r\nWith that question, I dove into the data files we had started to get a feel for what to do2. I had a few files to work with, lots of timestamps all over the place, and knew I had some sort of join type problem. I tried‚Äîand failed with‚Äîmany variations of joins (e.g., fuzzyjoin) and even trying to get what was needed in more manual3 ways. One thought kept ringing in my head: ‚Äúsomeone must have solved this problem.‚Äù So at that point I spent a few half days4 searching. Many fruitless paths later and on the verge of the more manual5 approaches I finally found what I was looking for: funneljoin.\r\nThough funneljoin was what I was looking for, my use of it was also a journey through multiple mistakes and misunderstandings all of which are my own6. But I eventually got exactly what I wanted: a straightforward way to join some data and find very specific events that occur after other events.\r\nA quick view of the data\r\nLet‚Äôs start out by taking a look at the data. That‚Äôll give us a better sense of the problem and the behavior we‚Äôre expecting. We‚Äôre going to be working with a tiny example of what the real data could look like. These fake data have been created from real data and then we used uuid, dplyr::group_by, lubridate and some good old fashioned randomization to make it fake.\r\nWe have two data files which look a lot like our real data:\r\nALL_ADT_EVENTS.csv: A file that contains all the Admit-Discharge-Transfer (ADT) events for patients while they are in the hospital, and\r\nSPECIFIC_PROCEDURES.csv: which contains a very specific set of procedures while in the hospital.\r\nIt‚Äôs very worth noting that all the events in SPECIFIC_PROCEDURES are in ALL_ADT_EVENTS. These are separate for a few reasons including (but certainly not limited to): it‚Äôs easier to work with when we want to know only about the procedures, and things like procedures can (and are) pulled from separate pipelines more specific than ADT pipelines.\r\nA look at the data\r\nLet‚Äôs start out by taking a look at some of the ADT file and a few (preselected) rows to highlight these data. And while we‚Äôre at it, we‚Äôll see the code, too!\r\n\r\n\r\nlibrary(here)       ## for here::here() and referencing files from this .RProj\r\nlibrary(dplyr)      ## for some processing and those fancy pipes\r\nlibrary(kableExtra) ## for some extra fancy looking tables\r\nlibrary(rmarkdown)  ## for some even more extra fancy tables\r\n\r\nADT_FILE_PATH <- here::here(\"_posts\",\"2022-08-12-putting-the-fun-in-funneljoin\", \"ALL_ADT_EVENTS.csv\")\r\nADT_EVENTS <- read.csv(ADT_FILE_PATH, \r\n                        stringsAsFactors = FALSE)\r\n\r\nADT_EVENTS %>%\r\n  slice( c(1, 2, 3, 12, 13, 16, 20, 21) ) %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-05-10 06:08:10\r\n\r\n\r\nNA\r\n\r\n\r\nED TRIAGE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-05-10 06:13:24\r\n\r\n\r\nED TRIAGE\r\n\r\n\r\nED TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-05-10 06:54:10\r\n\r\n\r\nED TRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-13 11:32:48\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-18 19:53:13\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nTRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-28 02:14:32\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-29 22:09:10\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nNA\r\n\r\n\r\nIn our table we see some (preselected) rows and all of our columns. We‚Äôre looking at just 1 patient (ENCOUNTER_NUM_ANONYMIZED) with a snapshot of some of their events (EVENT_TS_FUZZED), which service they were coming from (FROM_SERVICE) and which service they were going to (TO_SERVICE).\r\nLet‚Äôs now take a look at the SPECIFIC_PROCEDURES data\r\n\r\n\r\nPROCEDURE_FILE_PATH <- here::here(\"_posts\",\"2022-08-12-putting-the-fun-in-funneljoin\", \"SPECIFIC_PROCEDURES.csv\")\r\nSPECIFIC_PROCEDURES <- read.csv(PROCEDURE_FILE_PATH,\r\n                                 stringsAsFactors = FALSE)\r\n\r\nSPECIFIC_PROCEDURES %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 21:34:13\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\n7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\r\n\r\n\r\n2083-06-02 10:46:45\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\n7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\r\n\r\n\r\n2083-06-22 02:59:57\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\n87d439b0-4f26-4b73-8df3-bf5dbbf34ca7\r\n\r\n\r\n2090-09-05 15:01:52\r\n\r\n\r\nNEUROSURGERY\r\n\r\n\r\nINTENSIVE CARE NEURO SURGERY\r\n\r\n\r\nWe‚Äôre showing all of SPECIFIC_PROCEDURES because it‚Äôs much smaller. It has the same structure as the ADT file (and that‚Äôs because the procedures are a subset of all the ADT events). Now that we see the procedures we can also see that it‚Äôs an event in ADT_EVENTS. The first SPECIFIC_PROCEDURE:\r\n\r\n\r\nSPECIFIC_PROCEDURES %>%\r\n  slice(1) %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nand now the ADT events with the event before, the procedure event, and the event after (which is what we want to specifically identify; eventually that is).\r\n\r\n\r\nADT_EVENTS %>%\r\n  slice( c(15, 16, 17) ) %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-18 20:02:58\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nTRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 19:54:10\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nA fun note before we move on: When you look at these data you‚Äôll see some NA in there. Those NA are Rs NA which is effectively missing data. In this case NA is absolutely not NA which is sodium (sodium is not a service). You should really take a look at some of the ‚Äúfun‚Äù with NA we‚Äôve had.\r\nWhat we want and the behavior we‚Äôd expect\r\nOur task was to identify the event that happens after specific procedures. From the above, we can see an example of that:\r\n\r\n\r\nADT_EVENTS %>%\r\n  slice( c(16, 17) ) %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 19:54:10\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nThe first row is the procedure and the second row is the event that happens after a specific procedure. At the end of what we do, we want all of those events after procedures because we needed to understand more about patient movements after procedures for some of our modelling.\r\nA journey to find and a journey through funneljoin\r\nGiven that we have two data sets and we know that we want to match on certain things (ENCOUNTER_NUM_ANONYMIZED) but conditional on subsequent time stamps (EVENT_TS_FUZZED), we probably have some sort of join problem.\r\nI spent a lot of time trying out a lot of the standard join and merge options we find in R: dplyr, base::merge, and even ventured off into the land of fuzzyjoin. I tried a lot of things and all of those things were wrong or overly complicated.\r\nSo instead of just writing some code to find the next line in the ADT events data after a matching line in the procedures data, I spent a few7 half days8 searching for a package that probably does the thing I‚Äôm looking for. It took me quite a while and a variety of search terms (e.g., ‚Äútime series join,‚Äù ‚Äújoin events after,‚Äù ‚Äúfuzzyjoin for time,‚Äù ‚Äúwhy doesn‚Äôt this specific thing I want exist and why am I so bad at this?‚Äù) until I eventually found funneljoin9.\r\nThe funneljoin package includes a lot of join options for time series data. In particular after_join is when we‚Äôre looking for events in one data set that occur after events in another data set. That was exactly what I was looking for. Though after_join was the key to solving my problems, I still had a few more problems10 but did eventually figure it all out and it was magical. Let‚Äôs walk through three examples with these data and after_join to show where I failed and where I eventually succeeded.\r\nMy first failure\r\nI dove into after_join with, basically, the default parameters. So let‚Äôs break this down:\r\nx is our procedures data because that‚Äôs our reference point: we want ADT events after procedures\r\ny is our ADT data to get those events after procedures\r\nby_user is the column we use for identifiers (ENCOUNTER_NUM_ANONYMIZED); this is a very typical parameter to expect in join and merge, as we usually want to join data sets based on some identifier\r\nby_time is the column we use to find the events (EVENT_TS_FUZZED); this is how funneljoin makes use of time series data\r\nsuffix appends labels to the newly created columns after the join, respectively for x then y\r\nSeems straight forward enough! Let‚Äôs see what happens:\r\n\r\n\r\nlibrary(funneljoin)\r\n\r\njoin_attempt_one <- after_join(\r\n  x = SPECIFIC_PROCEDURES,\r\n  y = ADT_EVENTS,\r\n  by_user = \"ENCOUNTER_NUM_ANONYMIZED\",\r\n  by_time = \"EVENT_TS_FUZZED\",\r\n  suffix = c(\"_PROCEDURES\",\"_ADT\")\r\n)\r\n\r\nrmarkdown::paged_table(join_attempt_one)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"ENCOUNTER_NUM_ANONYMIZED\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"EVENT_TS_FUZZED_PROCEDURES\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_PROCEDURES\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_PROCEDURES\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"EVENT_TS_FUZZED_ADT\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_ADT\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_ADT\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nErr‚Ä¶ it sort of looks like nothing happens. Why is that? Well it‚Äôs because our resulting join is empty11\r\nMy second failure\r\nI clearly missed something12. On a closer look at the parameters, it seemed like I needed a couple of more to make things work. So I brought them in and tried:\r\nmode is inner which is a specific type of join which is basically the intersection\r\ntype here is one of many options on how to think about the join and we set it to first-firstafter\r\nBefore we dive into the updated code let‚Äôs pause for what type is and what first-firstafter means. Heavily borrowing from the funneljoin site:\r\nfirst-firstafter: Take the first x, then the first y after that. For example, we have the first procedure for the first patient in the procedures (x) data, and we want the first event from the ADT (y) data that occurs afterwards. We don‚Äôt want all afterward, we don‚Äôt want any before. Just the one! So let‚Äôs try it:\r\n\r\n\r\njoin_attempt_two <- after_join(\r\n  x = SPECIFIC_PROCEDURES,\r\n  y = ADT_EVENTS,\r\n  by_user = \"ENCOUNTER_NUM_ANONYMIZED\",\r\n  by_time = \"EVENT_TS_FUZZED\",\r\n  suffix = c(\"_PROCEDURES\",\"_ADT\"),\r\n  mode = \"inner\",\r\n  type = \"first-firstafter\"\r\n)\r\n\r\nrmarkdown::paged_table(join_attempt_two)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"ENCOUNTER_NUM_ANONYMIZED\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"EVENT_TS_FUZZED_PROCEDURES\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_PROCEDURES\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_PROCEDURES\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"EVENT_TS_FUZZED_ADT\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_ADT\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_ADT\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"a4461971-22e1-46e1-8454-aa7fbce54205\",\"2\":\"2082-06-22 10:27:06\",\"3\":\"TRAUMA\",\"4\":\"INTENSIVE CARE TRAUMA\",\"5\":\"2082-06-22 10:27:06\",\"6\":\"TRAUMA\",\"7\":\"INTENSIVE CARE TRAUMA\"},{\"1\":\"7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\",\"2\":\"2083-06-02 10:46:45\",\"3\":\"TRAUMA\",\"4\":\"INTENSIVE CARE TRAUMA\",\"5\":\"2083-06-02 10:46:45\",\"6\":\"TRAUMA\",\"7\":\"INTENSIVE CARE TRAUMA\"},{\"1\":\"87d439b0-4f26-4b73-8df3-bf5dbbf34ca7\",\"2\":\"2090-09-05 15:01:52\",\"3\":\"NEUROSURGERY\",\"4\":\"INTENSIVE CARE NEURO SURGERY\",\"5\":\"2090-09-05 15:01:52\",\"6\":\"NEUROSURGERY\",\"7\":\"INTENSIVE CARE NEURO SURGERY\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nThe above shows the whole table but let‚Äôs take a closer look at something‚Ä¶\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED_PROCEDURES\r\n\r\n\r\nEVENT_TS_FUZZED_ADT\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\n7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\r\n\r\n\r\n2083-06-02 10:46:45\r\n\r\n\r\n2083-06-02 10:46:45\r\n\r\n\r\n87d439b0-4f26-4b73-8df3-bf5dbbf34ca7\r\n\r\n\r\n2090-09-05 15:01:52\r\n\r\n\r\n2090-09-05 15:01:52\r\n\r\n\r\nWell that didn‚Äôt quite work because it‚Äôs actually finding the same time stamped events. So we‚Äôre not yet finding the first event after but we‚Äôve at least got something. So‚Ä¶ what are we missing?\r\nA third successful attempt\r\nWhat we‚Äôre missing is the next event. Right now, we‚Äôre getting back the same event. Fortunately there‚Äôs a parameter for that:\r\nmin_gap allows us to specify how much time there must be in between the first-firstafter events. There are also two companion parameters to this: max_gap and gap_col which tell us, respectively, the maximum time between events and a column to include the gap in time itself. For fun, let‚Äôs also add in gap_col so we can see the amount of time between events.\r\n\r\n\r\njoin_attempt_three <- after_join(\r\n  x = SPECIFIC_PROCEDURES,\r\n  y = ADT_EVENTS,\r\n  by_user = \"ENCOUNTER_NUM_ANONYMIZED\",\r\n  by_time = \"EVENT_TS_FUZZED\",\r\n  suffix = c(\"_PROCEDURES\",\"_ADT\"),\r\n  mode = \"inner\",\r\n  type = \"first-firstafter\",\r\n  min_gap = base::as.difftime(1,units=\"secs\"),\r\n  gap_col = TRUE\r\n)\r\n\r\nrmarkdown::paged_table(join_attempt_three)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"ENCOUNTER_NUM_ANONYMIZED\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"EVENT_TS_FUZZED_PROCEDURES\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_PROCEDURES\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_PROCEDURES\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".gap\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"EVENT_TS_FUZZED_ADT\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FROM_SERVICE_ADT\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"TO_SERVICE_ADT\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"a4461971-22e1-46e1-8454-aa7fbce54205\",\"2\":\"2082-06-22 10:27:06\",\"3\":\"TRAUMA\",\"4\":\"INTENSIVE CARE TRAUMA\",\"5\":\"34024\",\"6\":\"2082-06-22 19:54:10\",\"7\":\"INTENSIVE CARE TRAUMA\",\"8\":\"TRAUMA\"},{\"1\":\"7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\",\"2\":\"2083-06-02 10:46:45\",\"3\":\"TRAUMA\",\"4\":\"INTENSIVE CARE TRAUMA\",\"5\":\"1222979\",\"6\":\"2083-06-16 14:29:44\",\"7\":\"INTENSIVE CARE TRAUMA\",\"8\":\"INTENSIVE CARE TRAUMA\"},{\"1\":\"87d439b0-4f26-4b73-8df3-bf5dbbf34ca7\",\"2\":\"2090-09-05 15:01:52\",\"3\":\"NEUROSURGERY\",\"4\":\"INTENSIVE CARE NEURO SURGERY\",\"5\":\"74931\",\"6\":\"2090-09-06 11:50:43\",\"7\":\"INTENSIVE CARE NEURO SURGERY\",\"8\":\"NEUROSURGERY\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nOh that looks like we did it! Let‚Äôs look at just the snapshot of encounter numbers and timestamps with the .gap column:\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED_PROCEDURES\r\n\r\n\r\nEVENT_TS_FUZZED_ADT\r\n\r\n\r\n.gap\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\n2082-06-22 19:54:10\r\n\r\n\r\n34024\r\n\r\n\r\n7cc7972a-58a1-4c78-a0dc-83021c6dc0c6\r\n\r\n\r\n2083-06-02 10:46:45\r\n\r\n\r\n2083-06-16 14:29:44\r\n\r\n\r\n1222979\r\n\r\n\r\n87d439b0-4f26-4b73-8df3-bf5dbbf34ca7\r\n\r\n\r\n2090-09-05 15:01:52\r\n\r\n\r\n2090-09-06 11:50:43\r\n\r\n\r\n74931\r\n\r\n\r\nOH I THINK WE REALLY DID DO IT. Let‚Äôs just take a quick look back at an earlier chunk of code and verify based on just the ADT file for just one example13\r\n\r\n\r\nADT_EVENTS %>%\r\n  slice( c(16, 17) ) %>%\r\n  kableExtra::kbl() %>%\r\n  kableExtra::kable_styling() \r\n\r\n\r\n\r\nENCOUNTER_NUM_ANONYMIZED\r\n\r\n\r\nEVENT_TS_FUZZED\r\n\r\n\r\nFROM_SERVICE\r\n\r\n\r\nTO_SERVICE\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 10:27:06\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\na4461971-22e1-46e1-8454-aa7fbce54205\r\n\r\n\r\n2082-06-22 19:54:10\r\n\r\n\r\nINTENSIVE CARE TRAUMA\r\n\r\n\r\nTRAUMA\r\n\r\n\r\nConclusions\r\nThe first conclusion is that funneljoin is awesome and the second conclusion is that I‚Äôm lazy. It is also a safe assumption to conclude that I‚Äôve used an excessive amount of unnecessary footnotes14.\r\nWhen we look back at these data and the problem, we probably could have solved this with some dplyr::group_by at the encounter (ID) level, do some checks on the timestamps, and some stuff like that. But we had these two data sets‚Äîeach used separately for different reasons in the same project‚Äîso why not make this easy and intuitive? That‚Äôs the major advantage of funneljoin here.\r\nMaybe the way I solved this problem with funneljoin could have been better15, but this was really useful for me. It was also a super useful exercise for us to find this package and start to understand it because we deal with a lot of time stamps. We often have frequent questions about order of events, or we have to pull multiple pieces of data together from a variety of source systems and ensure it‚Äôs all in the right order.\r\nAnd learning funneljoin was fun and you can tell because it‚Äôs literally in the name.\r\n\r\n\r\n\r\nPou-Prom, Chlo√©, Joshua Murray, Sebnem Kuzulugil, Muhammad Mamdani, and Amol Verma. n.d. ‚ÄúFrom Compute to Care: Lessons Learned from Deploying an Early Warning System into Clinical Practice.‚Äù Frontiers in Digital Health, 174. https://www.frontiersin.org/articles/10.3389/fdgth.2022.932123/abstract.\r\n\r\n\r\nVerma, Amol A., Joshua Murray, Russell Greiner, Joseph Paul Cohen, Kaveh G. Shojania, Marzyeh Ghassemi, Sharon E. Straus, Chloe Pou-Prom, and Muhammad Mamdani. 2021. ‚ÄúImplementing Machine Learning in Medicine.‚Äù CMAJ 193 (34): E1351‚Äì57. https://doi.org/10.1503/cmaj.202434.\r\n\r\n\r\n‚Äúhelping‚Äù is generous: I mostly asked a million stupid questions and as we‚Äôve seen, spent many days finding a package to do what I want instead of just doing it‚Ü©Ô∏é\r\nagain: not without asking a million stupid questions and getting back a million fantastic answers‚Ü©Ô∏é\r\nand very hacky‚Ü©Ô∏é\r\na ‚Äòfew‚Äô is defined as a week and ‚Äòhalf day‚Äô is defined as ‚Äòdefinitely more than half a day‚Äô‚Ü©Ô∏é\r\nand very hacky‚Ü©Ô∏é\r\na million stupid questions followed by a million stupid mistakes‚Ü©Ô∏é\r\nagain: not a few‚Ü©Ô∏é\r\nagain: definitely more than half days‚Ü©Ô∏é\r\nfound is a generous term, I more so stumbled across it with no recollection how I found it after a week‚Ü©Ô∏é\r\nDid I mention I‚Äôm bad at this?‚Ü©Ô∏é\r\nagain: I ain‚Äôt so good at this‚Ü©Ô∏é\r\nthis is a generous way of saying I didn‚Äôt read the documentation‚Ü©Ô∏é\r\nwe really should verify for all but have I mentioned I‚Äôm lazy?‚Ü©Ô∏é\r\nnot enough footnotes and they are totally necessary‚Ü©Ô∏é\r\nalmost certainly it could have been better‚Ü©Ô∏é\r\n",
    "preview": "posts/2022-08-12-putting-the-fun-in-funneljoin/preview.png",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-06-21-is-my-ai-discriminatory/",
    "title": "Is my AI Discriminatory?",
    "description": "A discussion about bias in healthcare AI, and building models with fairness and ethics in mind. [5 min read]",
    "author": [
      {
        "name": "Meggie Debnath",
        "url": {}
      }
    ],
    "date": "2022-06-21",
    "categories": [
      "post-journal-club",
      "bias-fairness-ethics"
    ],
    "contents": "\r\n\r\nContents\r\nBias is everywhere\r\nHealthcare data, like any data, is flawed\r\nBuilding fairer models\r\nTakeaways\r\nAdditional resources\r\n\r\nArtificial intelligence (AI) and machine learning (ML), in particular, are part of decision making across industries, the public sectors, and everywhere in between. From identifying fraudulent bank transactions to listing the shows and movies we‚Äôre most likely to enjoy, AI is deeply embedded within our everyday lives. Oftentimes the results or outputs of these decisions are relatively harmless. However, increasingly, machine learning models are trained on complex and sensitive data, and used as part of decision making processes for diagnosing diseases or making hiring decisions. While these models have the ability to transform and improve lives, sometimes the decisions made or informed by AI can have far-reaching consequences.\r\nAs a part of our team‚Äôs bi-weekly journal clubs, we talked about sources of bias for AI models, the potential consequences and harms they can create, and what we can do as data scientists within the healthcare space.\r\nBias is everywhere\r\nBias is a part of human nature, coming from the limited view of the world that any single person or group can achieve. Whether implicitly or explicitly, this bias gets captured within our institutions and by extension - the data that we record. It can be reflected and amplified by artificial intelligence models that are trained using this data. Generally, the bias encoded within AI tools result in the greatest harm toward disadvantaged groups and people, such as racial minorities.\r\n\r\n\r\n\r\nFigure 1: Different types of bias that can exist when training machine learning models source\r\n\r\n\r\n\r\nThere are a few different ways bias can affect the prediction or decision made by an algorithm (Norori et al. 2021):\r\nHuman bias: underlying bias within the data caused by societal inequities and biased human decision-making\r\nData-driven bias: when training data is not representative of the population in which the algorithm will be applied\r\nAlgorithmic bias: when model development or training methods result in biased outcomes\r\nBy the same token, harms as a result of biased AI can manifest in different ways:\r\nHarm of allocation: if people are denied opportunities or resources based on the decision of an AI. An example of this is Amazon‚Äôs resume screening tool that was biased against women because it was trained on data from the past 10 years, which was overwhelmingly male.\r\nHarm of quality-of-service: when an AI tool does not perform at the same level for one group as it does for another. An example of this may be voice assistants trained on predominantly male voices may have trouble recognizing the voices of women who use it.\r\nIn this way, AI can be a flawed reflection of our society and its systemic biases, and can become a ‚Äúgatekeeper‚Äù for jobs, medical treatments, and opportunities.\r\nHealthcare data, like any data, is flawed\r\nWithin the context of healthcare services, it is especially important to consider the types of bias within our data, as decisions made with the support of AI have the ability to influence critical decisions such as which patients receive additional care, or what medication dosages are prescribed. As with many other industries, healthcare and medical data can be biased, incorrect, missing, and incomplete.\r\nEven without the presence of AI tools, healthcare data holds implicit bias. For example, when visiting the emergency department for abdominal pain, men wait an average of 49 minutes before receiving an analgesic, whereas women wait an average of 65 minutes (Chen et al. 2008). The COVID-19 pandemic has also highlighted many existing racial inequities in healthcare, with the morbidity and mortality rate being higher for Black Americans, Native Americans, Pacific Islanders, and Hispanic/Latino patients compared with White Americans (Gawthrop 2022).\r\nWhen machine learning models are trained using data that already contains historical and societal inequities, these patterns are learned by the model, and the biases can be amplified when making predictions for new patients. Models that are deployed with underlying biases can disadvantage the groups who were under or mis-represented within the training data. For example, algorithms trained to identify disease within chest radiograph images were found to have higher underdiagnosis rates for female patients, patients under 20 years old, Black patients, and Hispanic patients. In other words, the risk of being falsely predicted as ‚Äúhealthy‚Äù were higher for these groups of people, meaning their clinical treatment would have been delayed or missed entirely (Seyyed-Kalantari et al. 2021).\r\nBuilding fairer models\r\nWe know that our models can contain harmful biases. But what can we do as data scientists in the healthcare space to ensure our models benefit the most people, and don‚Äôt cause harm? This might be a daunting question, one that led to a lot more questions for our team:\r\nHow can we improve our development and monitoring processes to identify biases before they are deployed?\r\nShould we have a feedback loop to communicate data discrepancies and inform future data collection?\r\nHow can we better incorporate the patient experience and expertise?\r\nCan we incorporate recourse and contestability into our data science pipelines?\r\nBuilding fairer models is an iterative process, and one that requires more than one solution. Although not all are possible to implement everywhere, especially all at once, below are a few things our team is learning about and working on:\r\nUnderstanding sources and limitations of data. This involves thinking about where the data coming from and if there‚Äôs potential for any of the variables to be biased. For example, data containing a single variable ‚Äúgender‚Äù with limited responses may actually be a mixture of sex or perceived gender, rather than reflecting a patient‚Äôs true gender identity.\r\nBuilding models with an interdisciplinary and diverse team. When developing any kind of AI tool for clinical deployment, we heavily collaborate with the clinician teams that are involved. In addition, our project teams consist of people with varied backgrounds, experiences, cultures, and training.\r\nEvaluating model performance across sub-groups and applying techniques for improving explainability. There are many tools and resources for evaluating model fairness and understanding how a model performs for subgroups. Tools such as InterpretML and modelStudio.\r\nCreating and following standards for data, processes, models, and reporting. Standardization of these elements of a data science project ensures that there are clear guidelines and expectations, consistency among and across projects, and benchmarks to evaluate quality.\r\nMonitoring data, model usage, and performance over time. Monitoring how our models are performing after deployment is important to ensure there hasn‚Äôt been any data drift or changes in the environment that may cause poor performance.\r\nLearning, discussing, and sharing. We believe it‚Äôs important to keep learning, discussing through things like journal clubs, and where possible, sharing our processes, code, research, and learnings.\r\nAI has countless potential benefits, especially within healthcare - to improve patient care, hospital efficiency, and support decision-making. Working to build fairer models will help improve trust among clinically deployed AI tools, and ensure that all groups of people can benefit from the decisions made and supported by AI.\r\nTakeaways\r\nHuman bias, data-driven bias, and algorithmic bias are common ways in which a model might perform poorly for some patient subgroups, causing denial of opportunities or reducing quality of service\r\nThere is no perfect data, but there are different ways to combat bias and build models that are useful and reduce harms\r\nSome techniques for building better and fairer models include understanding sources of bias, building models considering multiple perspectives, evaluating them for fairness and explainability, and monitoring after deployment\r\nAdditional resources\r\nBelow are the full list of topics and readings that we dove into for our journal club series on bias, fairness, and ethics in healthcare AI.\r\nTopic\r\nReading Materials\r\nIntroduction to Bias, Fairness, and Ethics in AI\r\nMedicine‚Äôs Machine Learning Problem\r\nIndigenous Data, Representing Race in AI, and Structural Racism in Healthcare\r\nStructural racism in precision medicine: leaving no one behind Racial Disparities and Mistrust in End-of-Life Care Dissecting racial bias in an algorithm used to manage the health of populations Racism and Health: Evidence and Needed Research The disturbing return of scientific racism\r\nMachine Learning Best Practices & Regulations\r\nFDA In Brief: FDA Collaborates with Health Canada and UK‚Äôs MHRA to Foster Good Machine Learning Practice Algorithmic Impact Assessment tool Suicide hotline shares data with for-profit spinoff, raising ethical questions Their Bionic Eyes are now Obsolete and Unsupported\r\nFailure modes and Equity Concerns in Medical Imaging Models\r\nReading Race: AI Recognizes Patient‚Äôs Racial Identity in Medical Images Under-diagnosis bias of artificial intelligence algorithms applied to chest radiographs in under-served patient populations Common pitfalls and recommendations for using machine learning to detect and prognosticate for COVID-19 using chest radiographs and CT scans\r\nBias and Assessing Model Fairness & Transparency\r\nMan is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings How to make sure your model is fair, accountable, and transparent AI FactSheets 360\r\nRepresenting Sex & Gender in AI and Healthcare Data\r\nTransgender-inclusive measures of sex/gender for population surveys: Mixed-methods evaluation and recommendations Sex and gender differences and biases in artificial intelligence for biomedicine and healthcare\r\n\r\n\r\n\r\nChen, Esther H., Frances S. Shofer, Anthony J. Dean, Judd E. Hollander, William G. Baxt, Jennifer L. Robey, Keara L. Sease, and Angela M. Mills. 2008. ‚ÄúGender Disparity in Analgesic Treatment of Emergency Department Patients with Acute Abdominal Pain.‚Äù Academic Emergency Medicine 15 (5): 414‚Äì18. https://doi.org/10.1111/j.1553-2712.2008.00100.x.\r\n\r\n\r\nGawthrop, Elisabeth. 2022. ‚ÄúColor of Coronavirus: COVID-19 Deaths Analyzed by Race and Ethnicity.‚Äù APM Research Lab. https://www.apmresearchlab.org/covid/deaths-by-race.\r\n\r\n\r\nNorori, Natalia, Qiyang Hu, Florence Marcelle Aellen, Francesca Dalia Faraci, and Athina Tzovara. 2021. ‚ÄúAddressing Bias in Big Data and AI for Health Care: A Call for Open Science.‚Äù Patterns 2 (10): 100347. https://doi.org/10.1016/j.patter.2021.100347.\r\n\r\n\r\nSeyyed-Kalantari, Laleh, Haoran Zhang, Matthew B. A. McDermott, Irene Y. Chen, and Marzyeh Ghassemi. 2021. ‚ÄúUnderdiagnosis Bias of Artificial Intelligence Algorithms Applied to Chest Radiographs in Under-Served Patient Populations.‚Äù Nature Medicine 27 (12): 2176‚Äì82. https://doi.org/10.1038/s41591-021-01595-0.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-06-21-is-my-ai-discriminatory/ai-biases.jpg",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-05-09-ooh-na-na-where-are-my-sodium-labs/",
    "title": "Ooh na na... where are my sodium labs?",
    "description": "The NA bug, or, what happens when the same word is used in different contexts. [5 min read]",
    "author": [
      {
        "name": "Chloe Pou-Prom",
        "url": {}
      }
    ],
    "date": "2022-05-09",
    "categories": [
      "language-R",
      "project-chartwatch",
      "post-miscellaneous"
    ],
    "contents": "\r\n\r\nContents\r\nSilent deployment\r\nMonitoring labs\r\nThe NA bug\r\nTakeaways\r\n\r\n\r\n\r\n\r\nSilent deployment\r\nOur team had been working actively on developing CHARTwatch, an early warning system for patients in general internal medicine at St.¬†Michael‚Äôs Hospital. In November 2019 we were ready to move to a silent deployment phase, which means our entire pipeline was running (from data extraction to data processing to model prediction), but no outputs were going to the end-user.\r\nTypically, the goal of the silent deployment phase is to uncover unexpected behaviors with the data, system, or model. During model development and evaluation, we had only worked with historical extracts of the data. When moving from historical data to live data, there‚Äôs the risk of running into data issues (Cohen et al. 2021).\r\nThe data can be different due to external factors. For example, all of our models were trained on data prior to COVID-19, but shortly after the beginning of our silent deployment phase, we began to observe cases of COVID-19 in the hospital.\r\nThe data can be different due to data entry errors. For example, a body temperature could incorrectly be entered as 3700 ¬∞C instead of 37.00 ¬∞C.\r\nThe data can be different due to selection bias. For example, during training we excluded patients with really short and really long visits, as they were rare. However, we may encounter these kinds of visits in the live data.\r\nMonitoring labs\r\nWe had set up a monitoring dashboard to measure model inputs and model outputs. On close inspection, we made a discovery that was unquestionably odd‚Ä¶ no sodium labs had been measured since we had moved to silent testing!\r\n\r\n\r\n\r\n{\"x\":{\"attrs\":{\"title\":\"Electrolyte counts\",\"labels\":[\"day\",\"CA\",\"CL\",\"GLPOC\",\"K\",\"NA.\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"stackedGraph\":true,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"auto\",\"labelsDivWidth\":400,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true},\"scale\":\"daily\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2019-11-19T00:00:00.000Z\",\"2019-11-20T00:00:00.000Z\",\"2019-11-21T00:00:00.000Z\",\"2019-11-22T00:00:00.000Z\",\"2019-11-23T00:00:00.000Z\",\"2019-11-24T00:00:00.000Z\",\"2019-11-25T00:00:00.000Z\",\"2019-11-26T00:00:00.000Z\",\"2019-11-27T00:00:00.000Z\",\"2019-11-28T00:00:00.000Z\",\"2019-11-29T00:00:00.000Z\",\"2019-11-30T00:00:00.000Z\",\"2019-12-01T00:00:00.000Z\",\"2019-12-02T00:00:00.000Z\",\"2019-12-03T00:00:00.000Z\",\"2019-12-04T00:00:00.000Z\",\"2019-12-05T00:00:00.000Z\",\"2019-12-06T00:00:00.000Z\",\"2019-12-07T00:00:00.000Z\",\"2019-12-08T00:00:00.000Z\",\"2019-12-09T00:00:00.000Z\",\"2019-12-10T00:00:00.000Z\",\"2019-12-11T00:00:00.000Z\",\"2019-12-12T00:00:00.000Z\",\"2019-12-13T00:00:00.000Z\",\"2019-12-14T00:00:00.000Z\",\"2019-12-15T00:00:00.000Z\",\"2019-12-16T00:00:00.000Z\",\"2019-12-17T00:00:00.000Z\",\"2019-12-18T00:00:00.000Z\",\"2019-12-19T00:00:00.000Z\"],[18,23,18,19,18,18,20,15,21,11,20,15,15,14,14,9,14,12,7,12,17,13,14,12,21,15,15,24,24,22,13],[51,53,70,64,58,51,62,62,58,57,61,53,60,72,57,62,58,44,38,40,60,48,47,43,65,52,52,56,51,61,66],[56,41,50,56,54,66,51,56,52,60,72,52,79,74,83,91,77,64,60,61,57,68,59,62,55,42,59,65,63,50,70],[51,52,70,63,58,52,62,61,59,57,60,51,60,72,55,62,57,43,37,40,60,47,47,42,64,51,52,54,53,61,65],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[],\"jsHooks\":[]}\r\nFigure 1: Daily counts of lab measurements: this includes counts for calcium (CA), chloride (CL), glucose (GLPOC), potassium (K), and sodium (NA).\r\n\r\n\r\n\r\nDid this make sense? NA! Sodium is measured in routinely ordered blood tests. It‚Äôll usually get ordered alongside other tests (such as calcium, chloride, glucose, and potassium) as part of a basic metabolic panel. In Figure 1, we look at the daily counts of labs on units in which CHARTwatch was silently deployed. The other labs were regularly measured, but our pipeline had not detected a single sodium lab. There was NA way sodium would be missing!\r\nThe NA bug\r\nAfter hours of detective work, we found the issue:\r\nIn R, the programming language we used to develop CHARTwatch, the symbol NA stands for ‚Äúnot available‚Äù and is used to represent missing data.\r\nIn chemistry, Na is the symbol used to represent the chemical element of sodium.\r\n\r\n\r\n\r\n{\"x\":{\"attrs\":{\"title\":\"Electrolyte counts\",\"labels\":[\"day\",\"CA\",\"CL\",\"GLPOC\",\"K\",\"NA.\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"stackedGraph\":true,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"auto\",\"labelsDivWidth\":400,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true},\"scale\":\"daily\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2019-11-19T00:00:00.000Z\",\"2019-11-20T00:00:00.000Z\",\"2019-11-21T00:00:00.000Z\",\"2019-11-22T00:00:00.000Z\",\"2019-11-23T00:00:00.000Z\",\"2019-11-24T00:00:00.000Z\",\"2019-11-25T00:00:00.000Z\",\"2019-11-26T00:00:00.000Z\",\"2019-11-27T00:00:00.000Z\",\"2019-11-28T00:00:00.000Z\",\"2019-11-29T00:00:00.000Z\",\"2019-11-30T00:00:00.000Z\",\"2019-12-01T00:00:00.000Z\",\"2019-12-02T00:00:00.000Z\",\"2019-12-03T00:00:00.000Z\",\"2019-12-04T00:00:00.000Z\",\"2019-12-05T00:00:00.000Z\",\"2019-12-06T00:00:00.000Z\",\"2019-12-07T00:00:00.000Z\",\"2019-12-08T00:00:00.000Z\",\"2019-12-09T00:00:00.000Z\",\"2019-12-10T00:00:00.000Z\",\"2019-12-11T00:00:00.000Z\",\"2019-12-12T00:00:00.000Z\",\"2019-12-13T00:00:00.000Z\",\"2019-12-14T00:00:00.000Z\",\"2019-12-15T00:00:00.000Z\",\"2019-12-16T00:00:00.000Z\",\"2019-12-17T00:00:00.000Z\",\"2019-12-18T00:00:00.000Z\",\"2019-12-19T00:00:00.000Z\",\"2019-12-20T00:00:00.000Z\",\"2019-12-21T00:00:00.000Z\",\"2019-12-22T00:00:00.000Z\",\"2019-12-23T00:00:00.000Z\",\"2019-12-24T00:00:00.000Z\",\"2019-12-25T00:00:00.000Z\",\"2019-12-26T00:00:00.000Z\",\"2019-12-27T00:00:00.000Z\",\"2019-12-28T00:00:00.000Z\",\"2019-12-29T00:00:00.000Z\",\"2019-12-30T00:00:00.000Z\",\"2019-12-31T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-01-02T00:00:00.000Z\",\"2020-01-03T00:00:00.000Z\",\"2020-01-04T00:00:00.000Z\",\"2020-01-05T00:00:00.000Z\",\"2020-01-06T00:00:00.000Z\",\"2020-01-07T00:00:00.000Z\",\"2020-01-08T00:00:00.000Z\",\"2020-01-09T00:00:00.000Z\",\"2020-01-10T00:00:00.000Z\",\"2020-01-11T00:00:00.000Z\",\"2020-01-12T00:00:00.000Z\",\"2020-01-13T00:00:00.000Z\",\"2020-01-14T00:00:00.000Z\",\"2020-01-15T00:00:00.000Z\",\"2020-01-16T00:00:00.000Z\",\"2020-01-17T00:00:00.000Z\",\"2020-01-18T00:00:00.000Z\",\"2020-01-19T00:00:00.000Z\",\"2020-01-20T00:00:00.000Z\"],[18,23,18,19,18,18,20,15,21,11,20,15,15,14,14,9,14,12,7,12,17,13,14,12,21,15,15,24,24,22,13,24,23,17,30,32,25,20,29,16,20,20,16,18,23,21,23,26,21,16,17,14,15,14,16,16,21,22,19,24,25,23,33],[51,53,70,64,58,51,62,62,58,57,61,53,60,72,57,62,58,44,38,40,60,48,47,43,65,52,52,56,51,61,66,72,66,62,87,77,60,81,79,70,67,61,53,53,82,76,74,85,76,91,85,75,74,73,63,72,65,80,65,68,62,54,74],[56,41,50,56,54,66,51,56,52,60,72,52,79,74,83,91,77,64,60,61,57,68,59,62,55,42,59,65,63,50,70,68,69,82,90,82,80,84,70,87,98,67,62,64,113,100,87,105,75,91,109,120,109,92,82,91,65,79,69,58,48,58,62],[51,52,70,63,58,52,62,61,59,57,60,51,60,72,55,62,57,43,37,40,60,47,47,42,64,51,52,54,53,61,65,72,66,62,86,77,60,81,79,70,66,61,53,53,79,75,74,86,76,90,84,75,74,72,63,72,64,80,66,67,62,55,73],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,66,62,87,77,60,81,79,70,67,61,53,53,82,76,75,85,77,91,84,75,74,73,63,72,65,80,65,68,62,54,73]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[],\"jsHooks\":[]}\r\nFigure 2: Daily counts of lab measurements after fixing the NA bug\r\n\r\n\r\n\r\nDepending on the context, the symbol meant something different! Our data extraction pipeline was interpreting the chemical element Na as ‚Äúnot available!‚Äù\r\nThe fix was quite straightforward. We updated the parameters of one of our function calls to specify that \"\" (empty string) should be used to represent ‚Äúnot available,‚Äù instead of \"NA\". From the documentation of the RODBC package:\r\n\r\nna.strings: character string(s) to be mapped to NA when reading character data, default ‚ÄúNA‚Äù\r\n\r\nAfter deploying this fix, sodium counts were back to normal (as seen in Figure 2).\r\nWhile the fix was a simple one-line change, the problem we uncovered lead to plenty of follow-up questions!\r\nWere there other cases where the same symbol meant two different things based on the context?\r\nWhat does our electronic health record use to represent a missing value? Do they go with a number that‚Äôs biologically impossible? (e.g., a body temperature of -1000) Do they use a specific symbol/term? (e.g., ‚Äúnot measured,‚Äù ‚Äúmissing‚Äù)\r\nHow are these decisions made?\r\nRecently, there‚Äôs been a push for improvement in data quality standards, such as ‚ÄúDatasheets for Datasets‚Äù (Gebru et al. 2021) and the explosion of features stores, model stores, and evaluation stores1.\r\nTakeaways\r\nNA (sodium) ‚â† NA (not available)\r\nSilent deployment is important.\r\nThorough metadata and data quality standards are important to mitigating these kinds of issues.\r\n\r\n\r\n\r\nCohen, Joseph Paul, Tianshi Cao, Joseph D. Viviano, Chin-Wei Huang, Michael Fralick, Marzyeh Ghassemi, Muhammad Mamdani, Russell Greiner, and Yoshua Bengio. 2021. ‚ÄúProblems in the Deployment of Machine-Learned Models in Health Care.‚Äù CMAJ 193 (35): E1391‚Äì94. https://doi.org/10.1503/cmaj.202066.\r\n\r\n\r\nGebru, Timnit, Jamie Morgenstern, Briana Vecchione, Jennifer Wortman Vaughan, Hanna Wallach, Hal Daum√© III, and Kate Crawford. 2021. ‚ÄúDatasheets for Datasets.‚Äù Communications of the ACM 64 (12): 86‚Äì92. http://arxiv.org/abs/1803.09010.\r\n\r\n\r\nWhat kind of ‚Äústore‚Äù do we think is next? ü§î‚Ü©Ô∏é\r\n",
    "preview": "posts/2022-05-09-ooh-na-na-where-are-my-sodium-labs/preview.PNG",
    "last_modified": "2023-12-22T12:30:10-05:00",
    "input_file": {}
  }
]
